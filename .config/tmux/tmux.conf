# basic ----------------------------------------------------------------------------------------------------

set -g default-shell ${SHELL}

# 256色端末を使用する
set -g default-terminal "screen-256color"
set -g terminal-overrides 'xterm:colors=256'

# color ----------------------------------------------------------------------------------------------------

# アクティブなペインのみ白っぽく変更（真っ黒は 232）
set -g window-style 'bg=colour237'
set -g window-active-style 'bg=colour235'

# pane の border の色
set -g pane-border-style 'fg=colour111'
set -g pane-active-border-style 'fg=colour87'

# status line ----------------------------------------------------------------------------------------------------

set-option -g status-justify left
set-option -g status-position bottom

set-option -g status-fg 'colour255'
set-option -g status-bg 'colour236'
set-option -g status-left-length 200
set-option -g status-right-length 200

# status-left のフォーマットを指定する。
set-option -g status-left '\
#[fg=colour236]#[bg=colour192] Session #S \
#[fg=colour192]#[bg=colour068]\
#[fg=colour255]#[bg=colour068] #h \
#[fg=colour068]#[bg=colour236] '

# カレントウィンドウの window-status のフォーマットを指定する
setw -g window-status-current-format '\
#[fg=colour241]#[bg=colour236]\
#[fg=colour119]#[bg=colour241]#I\
#[fg=colour255]: #W #F\
#[fg=colour241]#[bg=colour236]'

# window-status のフォーマットを指定する。
setw -g window-status-format ' \
#[fg=colour255]#I\
#[fg=colour250]: #W \
#[fg=colour244]#F '

# status-right のフォーマットを指定する。
set-option -g status-right "\
#[fg=colour238]\
#[fg=colour253]#[bg=colour238] CPU: #(~/.config/tmux/cpu-usage.sh) \
#[fg=colour241]\
#[fg=colour254]#[bg=colour241] Mem: #(~/.config/tmux/memory-usage.sh) \
#[fg=colour024]\
#[fg=colour255]#[bg=colour024] #(echo ${LANG}) \
#[fg=colour031]\
#[fg=colour255]#[bg=colour031] %Y/%m/%d (%a) %H:%M:%S "

# status line を更新する間隔を1秒にする
set-option -g status-interval 1

# 操作系 ----------------------------------------------------------------------------------------------------

set-window-option -g xterm-keys on

# prefixキーの割り当て(Ctrl + b)
set -g prefix C-b

# マウス操作を有効化
set -g mouse on
bind-key -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"
bind-key -n WheelDownPane select-pane -t= \; send-keys -M

# コマンドモードでの選択方法を vim 風に変更
set-window-option -g mode-keys vi

# window ----------------------------------------------------------------------------------------------------

# カレントディレクトリを引き継いで、新しいウインドウ作成
bind-key c new-window -c '#{pane_current_path}'

# カレントディレクトリを引き継ぎ、 prefix + '-' で水平分割
bind-key - split-window -v -c '#{pane_current_path}'

# カレントディレクトリを引き継ぎ、 prefix + '|' で垂直分割
bind-key | split-window -h -c '#{pane_current_path}'

# prefix + X でウィンドウを削除するかの確認を表示
bind-key C-x confirm-before -p "This operation will kill 'WINDOW', not pane. kill-window #I? (y/n)" kill-window

# pane ----------------------------------------------------------------------------------------------------

# ペインの移動を prefix なしで行う（Ctrl + Alt + 矢印キー）
bind-key -n M-C-left select-pane -L
bind-key -n M-C-down select-pane -D
bind-key -n M-C-up select-pane -U
bind-key -n M-C-right select-pane -R

bind-key -r H resize-pane -L 2
bind-key -r J resize-pane -D 2
bind-key -r K resize-pane -U 2
bind-key -r L resize-pane -R 2

# ペインの順次移動をCtr + n に設定しない
unbind-key -T root C-n

# 並列実行のトグル化
bind-key e setw synchronize-panes \; display "synchronize-panes #{?pane_synchronized,on,off}"

[user]
	useConfigOnly = true

[core]
	editor = vim
	repositoryFormatVersion = 0
	eol = lf
	autocrlf = input
	filemode = true
	bare = false
	logAllRefUpdates = true
	pager = delta
	excludesFile = ~/.config/git/ignore
	attributesFile = ~/.config/git/attributes

[init]
	defaultBranch = main

[github]
	user = nokazn

[merge]
	ff = false

[pull]
	ff = only
	rebase = false
	merge = true

[pretty]
	default = "format:%C(yellow)%h%Creset%C(red)%d%Creset %C(white)%s%Creset %C(green)- [%an] %C(cyan)(%cr)%Creset"
	bold = "format:%C(yellow)%h%Creset%C(red)%d%Creset %C(white bold)%s%Creset %C(green)- %an %C(cyan)(%cr)%Creset"

# npm の認証トークンを含めない
[filter "ignore-npm-registry-token"]
	smudge = cat
	clean = sed -e "/registry.npmjs.org/d"

[alias]
	a = add
	aa = !git add -u && git add . && git status --show-stash
	alias = config --get-regexp alias.*
	allclean = clean -df
	amend = !git commit -m \"$(git log --format="%s" -n 1)\" --amend
	amend-author = !git commit -m \"$(git log --format="%s" -n 1)\" --author=\"$(git config --get user.name) <$(git config --get user.email)>\" --amend
	br = branch
	br-clean = "!f(){ git branch --merged | grep -v -E '\\*|develop|main|master' | xargs git branch -d; }; f"  # マージ済みのブランチを削除
	br-clean-all = "!f(){ git branch --merged | grep -v -E '\\*|develop|main|master' | xargs git branch -d; git fetch --prune; }; f"
	br-clean-remote = fetch --prune
	brr = "!f() { git fetch origin $1; git branch $1 origin/$1; }; f"  # リモートブランチを同じ名前でローカルに作成する
	c = commit
	ch = checkout
	chb = "!f(){ if [[ -z $2 ]]; then echo "❌ No parent branch specified."; exit 1; fi; git checkout -b $1 $2; }; f"  # 親ブランチの指定がなければ実行させない
	chr = "!f(){ git fetch origin $1; git checkout $1; }; f"  # リモートブランチを同じ名前でチェックアウトする
	cl = clone
	clgh = "!f() { git clone git@github.com:$1/$2; }; f"
	clgh-me = "!f() { git clone git@github.com:$(git config --get user.name)/$1; }; f"
	cm = commit -m
	cp = cherry-pick
	d = diff
	d1 = diff HEAD~1 HEAD
	d2 = diff HEAD~2 HEAD
	d3 = diff HEAD~3 HEAD
	d4 = diff HEAD~4 HEAD
	d5 = diff HEAD~5 HEAD
	dc = diff --cached
	dcl = diff --stat --cached
	dl = diff --stat
	dlc = diff --stat --cached
	exact-amend = !git commit -m \"$(git log --format="%s" -n 1)\" --date="$(git log --format="%cd" -n 1)" --amend
	l = log --stat --pretty=bold
	lg = log --graph --branches --pretty=default  # graph
	ll = log --numstat --decorate --pretty=bold  # line number status
	ln = log --name-status --pretty=bold  # name status
	lp = log --pretty  # pretty
	ls = log --oneline --pretty=default  # --oneline option
	ls-pr = log --pretty=format:\"- %s (%h)\" --reverse
	ls1 = log --oneline --pretty=default -n 1
	ls2 = log --oneline --pretty=default -n 2
	ls3 = log --oneline --pretty=default -n 3
	pl = !git pull origin $(git symbolic-ref --short HEAD)  # 同名のリモートブランチの内容を現在のブランチに取り込む
	ps = !git push origin $(git symbolic-ref --short HEAD)  # 現在のブランチの内容を同名のリモートブランチに push する
	psf = !git push --force-with-lease origin $(git symbolic-ref --short HEAD)  # ローカルの ref が最新でなければ失敗させる
	reamend = reset --soft HEAD@{1}
	reb = rebase
	rebi1 = rebase -i HEAD~
	rebi2 = rebase -i HEAD~~
	rebi3 = rebase -i HEAD~3
	rebi4 = rebase -i HEAD~4
	rebi5 = rebase -i HEAD~5
	remote-add-me = !git remote add origin git@github.com:\"$(git config --global user.name)\"/\"$(basename $(pwd))\"
	remote-set-url-me = !git remote set-url origin git@github.com:\"$(git config --global user.name)\"/\"$(basename $(pwd))\"
	s = status --show-stash
	sh = show
	ss = status --show-stash -s
	st = stash
	stm = stash -m
	stp = stash -p
	stu = stash -u --keep-index  # untracked のファイルも退避させる
	sw = switch
	swc = "!f(){ if [[ -z $2 ]]; then echo "❌ No parent branch specified."; exit 1; fi; git switch -c $1 $2; }; f"  # 親ブランチの指定がなければ実行させない
	swr = "!f() { git fetch origin $1; git switch $1; }; f"  # リモートブランチを同じ名前でチェックアウトする
	swt = "!f() { git switch -d refs/tags/$1; }; f"
	user ="!f(){ git config user.name $1; git config user.email $2; }; f"
	wt = worktree
	wta = "!f() { git worktree add $(readlink $(git rev-parse --git-dir | sed -E 's/\\.git.*$/./')/.worktree/$1 -f); }; f"
	wtr = "!f() { git worktree remove $(readlink $(git rev-parse --git-dir | sed -E 's/\\.git.*$/./')/.worktree/$1 -f); }; f"

[delta]
	line-numbers = true
	side-by-side = true

[http]
	sslVerify = true

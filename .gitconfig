[user]
	email =
	name = nokazn

[core]
	editor = vim
	repositoryFormatVersion = 0
	eol = lf
	autocrlf = input
	filemode = true
	bare = false
	logAllRefUpdates = true
	pager = delta
	excludesFile = ~/.config/git/ignore
	attributesFile = ~/.config/git/attributes

[init]
	defaultBranch = main

[github]
	user = nokazn

[merge]
	ff = false

[pull]
	ff = only
	rebase = true

[pretty]
	default = "format:%C(yellow)%h%Creset%C(red)%d%Creset %C(white)%s%Creset %C(green)- [%an] %C(cyan)(%cr)%Creset"
	bold = "format:%C(yellow)%h%Creset%C(red)%d%Creset %C(white bold)%s%Creset %C(green)- %an %C(cyan)(%cr)%Creset"

# npm の認証トークンを含めない
[filter "ignore-npm-registry-token"]
	smudge = cat
	clean = sed -e "/registry.npmjs.org/d"

# .gitconfig の email を含めない
[filter "ignore-email-attribute"]
	smudge = cat
	clean = sed -E -e 's/email\\s=\\s.+/email =/'

[alias]
	alias = config --get-regexp alias.*
	br = branch
	ch = checkout
	# 親ブランチの指定がなければ実行させない
	chb = "!f(){ if [[ -z $2 ]]; then echo "❌ No parent branch specified."; exit 1; fi; git checkout -b $1 $2; }; f"
	sw = switch
	# 親ブランチの指定がなければ実行させない
	swc = "!f(){ if [[ -z $2 ]]; then echo "❌ No parent branch specified."; exit 1; fi; git switch -c $1 $2; }; f"
	st = stash
	stu = stash -u --keep-index
	d = diff
	dc = diff --cached
	dl = diff --stat
	dlc = diff --stat --cached
	dcl = diff --stat --cached
	d1 = diff HEAD~1
	d2 = diff HEAD~2
	d3 = diff HEAD~3
	d4 = diff HEAD~4
	d5 = diff HEAD~5
	s = status --show-stash
	ss = status --show-stash -s
	a = add
	aa = !git add -u && git add . && git status --show-stash
	c = commit
	cm = commit -m
	# ローカルの ref が最新でなければ失敗させる
	push-f = !git push --force-with-lease origin $(git symbolic-ref --short HEAD)
	ps = !git push origin $(git symbolic-ref --short HEAD)
	pl = !git pull origin $(git symbolic-ref --short HEAD)
	plst = "!git stash; git pull origin $(git symbolic-ref --short HEAD); git stash pop;"
	# 引数に渡した番号の PR を pr/#<番号> というブランチに pull する
	plpr="!f(){ git pull origin \"pull/$1/head:pr/#$1\";};f"
	amend = !git commit -m \"$(git log --format="%s" -n 1)\" --amend
	exact-amend = !git commit -m \"$(git log --format="%s" -n 1)\" --date="$(git log --format="%cd" -n 1)" --amend
	reamend = reset --soft HEAD@{1}
	l = log --stat --pretty=bold
	# --oneline option
	ls = log --oneline --pretty=default
	ls1 = log --oneline --pretty=default -n 1
	ls2 = log --oneline --pretty=default -n 2
	ls3 = log --oneline --pretty=default -n 3
	# name status
	ln = log --name-status --pretty=bold
	# line number status
	ll = log --numstat --decorate --pretty=bold
	# graph
	lg = log --graph --branches --pretty=default
	reb = rebase
	rebi = rebase -i HEAD
	rebi1 = rebase -i HEAD~
	rebi2 = rebase -i HEAD~~
	rebi3 = rebase -i HEAD~3
	rebi4 = rebase -i HEAD~4
	rebi5 = rebase -i HEAD~5
	cp = cherry-pick
	remote-add-me = !git remote add origin git@github.com:\"$(git config --global user.name)\"/\"$(basename $(pwd))\"
	remote-set-url-me = !git remote set-url origin git@github.com:\"$(git config --global user.name)\"/\"$(basename $(pwd))\"

[delta]
	line-numbers = true
	side-by-side = true
